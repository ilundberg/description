---
title: "Challenge Exercise"
---

This exercise uses models to describe where we have **no data at all**.

* data: male and female incomes at age 30--50 in 2010--2019
* task: forecast male and female geometric mean pay at age 30--50 in 2022

Generate data as on the [Simulate Data](simulate_a_sample) page. You can set the sample size however large you want. You can use any model you want.

Report your prediction in this [Google Form](https://docs.google.com/forms/d/e/1FAIpQLSfCwF1pGf3hBDmi9AvQywh94-fz33zJE4YpVUAsxkv4ENavEQ/viewform?usp=sf_link).

## Things you might discuss

You might discuss methodological choices:

* how would you generate an evaluation set for this problem?
* what models do you think would work well?

You might also discuss conceptual issues:

* why might we be hesitant to carry out this extrapolation?

## Example R code to get you started

To run the code on this page, you will need the `tidyverse` package.

```{r, message = F, warning = F, results = "hide"}
library(tidyverse)
```

We will also set the seed so that it is possible to exactly reproduce these results.

```{r}
set.seed(90095)
```

As a simple example, you might simulate a sample of size 100,

```{r, echo = F, results = "hide", message = F, warning = F}
library(tidyverse)
simulate <- function(n = 100) {
  read_csv("assets/truth.csv") |>
    slice_sample(n = n, weight_by = weight, replace = T) |>
    mutate(income = exp(rnorm(n(), meanlog, sdlog))) |>
    select(year, age, sex, income)
}
```

```{r, results = "hide", message = F, warning = F, comment = F}
simulated <- simulate(n = 100)
```

estimate a linear model on those data,

```{r}
fit <- lm(log(income) ~ sex * year, data = simulated)
```

and report predictions in 2022.
```{r}
to_predict <- tibble(
  sex = c("female","male"),
  year = c(2022,2022)
)
to_predict |>
  mutate(
    # Make prediction
    estimate = predict(fit, newdata = to_predict),
    # Exponentiate to dollars
    estimate = exp(estimate)
  )
```

```{r, echo = F}
p <- simulated |>
  ggplot(aes(x = year, y = income, color = sex)) +
  scale_y_continuous(
    name = "Income\n(Log Scale)",
    breaks = c(10e3,50e3,250e3),
    labels = scales::label_dollar(), 
    trans = "log"
  ) +
  scale_x_continuous(
    breaks = c(seq(2010,2022,3)),
    limits = c(2010,2022),
    name = "Year"
  ) +
  geom_vline(xintercept = 2022, linewidth = 4, alpha = .2, color = "seagreen") +
  scale_color_discrete(name = "Sex", labels = stringr::str_to_title)

p +
  geom_point()

ggsave("slides/challenge_data.pdf", height = 3, width = 4)

predicted <- simulated |>
  bind_rows(tibble(
    year = 2022, 
    sex = c("female","male")
  )) |>
  mutate(
    yhat = exp(predict(
      fit, 
      newdata = simulated |> 
        bind_rows(tibble(
          year = 2022, 
          sex = c("female","male")
        ))
    )
  ))

p2 <- p + 
  geom_point(alpha = .2) +
  geom_line(
    data = predicted,
    aes(y = yhat)
  )

p3 <- p2 + 
  geom_point(
    data = predicted |> filter(year == 2022),
    aes(y = yhat)
  )

ggsave("slides/challenge_line.pdf", plot = p2, height = 3, width = 4)
ggsave("slides/challenge_forecast.pdf", plot = p3, height = 3, width = 4)
```

## Example Stata code to get you started

First generate your learning dataset. Use the Stata code at the bottom of [Simulate Data](simulate.qmd). Save this file.

```{r, eval = F}
save learning
```

Then generate your dataset in which to make predictions.

```{r, eval = F}
use learning
* Update the year to 2022
replace year = 2022
* Keep only the year and sex variables
keep year sex
* Keep only one observation in each group
bysort year sex: gen index = _n
keep if index == 1
```

Fit a regression model in the learning set.
```{r, eval = F}
clear all
use learning
reg log_income year##sex
```

Load the predict set and make predictions from that fitted model.
```{r, eval = F}
clear all
use to_predict
predict predicted
```

## What to try next

You might consider different functional forms, the overall mean, or machine learning estimators.
